/*!
 * Dashmix - v2.0.0
 * @author pixelcave - https://pixelcave.com
 * Copyright (c) 2019
 */
! function(r) {
    var e = {};

    function t(a) {
        if (e[a]) return e[a].exports;
        var o = e[a] = {
            i: a,
            l: !1,
            exports: {}
        };
        return r[a].call(o.exports, o, o.exports, t), o.l = !0, o.exports
    }
    t.m = r, t.c = e, t.d = function(r, e, a) {
        t.o(r, e) || Object.defineProperty(r, e, {
            enumerable: !0,
            get: a
        })
    }, t.r = function(r) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(r, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(r, "__esModule", {
            value: !0
        })
    }, t.t = function(r, e) {
        if (1 & e && (r = t(r)), 8 & e) return r;
        if (4 & e && "object" == typeof r && r && r.__esModule) return r;
        var a = Object.create(null);
        if (t.r(a), Object.defineProperty(a, "default", {
                enumerable: !0,
                value: r
            }), 2 & e && "string" != typeof r)
            for (var o in r) t.d(a, o, function(e) {
                return r[e]
            }.bind(null, o));
        return a
    }, t.n = function(r) {
        var e = r && r.__esModule ? function() {
            return r.default
        } : function() {
            return r
        };
        return t.d(e, "a", e), e
    }, t.o = function(r, e) {
        return Object.prototype.hasOwnProperty.call(r, e)
    }, t.p = "", t(t.s = 2)
}([, , function(r, e, t) {
    r.exports = t(3)
}, function(r, e) {
    function t(r, e) {
        for (var t = 0; t < e.length; t++) {
            var a = e[t];
            a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(r, a.key, a)
        }
    }
    var a = function() {
        function r() {
            ! function(r, e) {
                if (!(r instanceof e)) throw new TypeError("Cannot call a class as a function")
            }(this, r)
        }
        var e, a, o;
        return e = r, o = [{
            key: "initChartsChartJS",
            value: function() {
                Chart.defaults.global.defaultFontColor = "#495057", Chart.defaults.scale.gridLines.color = "rgba(0,0,0,.04)", Chart.defaults.scale.gridLines.zeroLineColor = "rgba(0,0,0,.1)", Chart.defaults.scale.ticks.beginAtZero = !0, Chart.defaults.global.elements.line.borderWidth = 2, Chart.defaults.global.elements.point.radius = 5, Chart.defaults.global.elements.point.hoverRadius = 7, Chart.defaults.global.tooltips.cornerRadius = 3, Chart.defaults.global.legend.labels.boxWidth = 12;
                var r, e, t = jQuery(".js-chartjs-lines"),
                    a = jQuery(".js-chartjs-bars"),
                    o = jQuery(".js-chartjs-radar"),
                    n = jQuery(".js-chartjs-polar"),
                    l = jQuery(".js-chartjs-pie"),
                    i = jQuery(".js-chartjs-donut");
                r = {
                    labels: ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"],
                    datasets: [{
                        label: "Order Complete",
                        fill: !0,
                        backgroundColor: "rgba(130,181,75, .75)",
                        borderColor: "rgba(130,181,75, 1)",
                        pointBackgroundColor: "rgba(130,181,75, 1)",
                        pointBorderColor: "#fff",
                        pointHoverBackgroundColor: "#fff",
                        pointHoverBorderColor: "rgba(130,181,75, 1)",
                        stack: 'Stack 0',
                        data: [34, 42, 62, 78, 39, 83, 98]
                    }, {
                        label: "Order On Progress",
                        fill: !0,
                        backgroundColor: "rgba(108, 117, 125, .25)",
                        borderColor: "rgba(108, 117, 125, .75)",
                        pointBackgroundColor: "rgba(108, 117, 125, 1)",
                        pointBorderColor: "#fff",
                        pointHoverBackgroundColor: "#fff",
                        pointHoverBorderColor: "rgba(108, 117, 125, 1)",
                        stack: 'Stack 0',
                        data: [130, 95, 125, 150, 100, 90, 50]
                    },
                    {
                        label: "Order Open",
                        fill: !0,
                        backgroundColor: "rgba(6, 101, 208, .75)",
                        borderColor: "rgba(6, 101, 208, 1)",
                        pointBackgroundColor: "rgba(6, 101, 208, 1)",
                        pointBorderColor: "#fff",
                        pointHoverBackgroundColor: "#fff",
                        pointHoverBorderColor: "rgba(6, 101, 208, 1)",
                        stack: 'Stack 0',
                        data: [40, 80, 100, 110, 130, 190, 150]
                    }
                    ]
                }, lines = {
                    labels: ["MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"],
                    datasets: [{
                        label: "On Time",
                        fill: !0,
                        backgroundColor: "rgba(130,181,75, .75)",
                        borderColor: "rgba(130,181,75, 1)",
                        pointBackgroundColor: "rgba(130,181,75, 1)",
                        pointBorderColor: "#fff",
                        pointHoverBackgroundColor: "#fff",
                        pointHoverBorderColor: "rgba(130,181,75, 1)",
                        data: [34, 42, 62, 78, 39, 83, 98]
                    }, {
                        label: "Overdue",
                        fill: !0,
                        backgroundColor: "rgba(108, 117, 125, .25)",
                        borderColor: "rgba(108, 117, 125, .75)",
                        pointBackgroundColor: "rgba(108, 117, 125, 1)",
                        pointBorderColor: "#fff",
                        pointHoverBackgroundColor: "#fff",
                        pointHoverBorderColor: "rgba(108, 117, 125, 1)",
                        data: [130, 95, 125, 150, 100, 90, 50]
                    },
                    {
                        label: "Skip",
                        fill: !0,
                        backgroundColor: "rgba(6, 101, 208, .25)",
                        borderColor: "rgba(6, 101, 208, 0.75)",
                        pointBackgroundColor: "rgba(6, 101, 208, 1)",
                        pointBorderColor: "#fff",
                        pointHoverBackgroundColor: "#fff",
                        pointHoverBorderColor: "rgba(6, 101, 208, 1)",
                        data: [40, 80, 100, 110, 130, 190, 150]
                    }
                    ]
                },e = {
                    labels: ["Order Complete", "Order on Progress", "Order Open"],
                    datasets: [{
                        data: [65, 15, 20],
                        backgroundColor: ["rgba(130,181,75, 1)", "rgba(108, 117, 125, 1)", "rgba(6, 101, 208, 1)"],
                        hoverBackgroundColor: ["rgba(130,181,75, .5)", "rgba(108, 117, 125, .5)", "rgba(6, 101, 208, .5)"]
                    }]
                }, t.length && new Chart(t, {
                    type: "line",
                    data: lines
                }), a.length && new Chart(a, {
                    type: "bar",
                    data: r
                }), o.length && new Chart(o, {
                    type: "radar",
                    data: r
                }), n.length && new Chart(n, {
                    type: "polarArea",
                    data: e
                }), l.length && new Chart(l, {
                    type: "pie",
                    data: e
                }), i.length && new Chart(i, {
                    type: "doughnut",
                    data: e
                })
            }
        }, {
            key: "initRandomEasyPieChart",
            value: function() {
                jQuery(".js-pie-randomize").on("click", function(r) {
                    jQuery(r.currentTarget).parents(".block").find(".pie-chart").each(function(r, e) {
                        return jQuery(e).data("easyPieChart").update(Math.floor(100 * Math.random() + 1))
                    })
                })
            }
        }, {
            key: "init",
            value: function() {
                this.initChartsChartJS(), this.initRandomEasyPieChart()
            }
        }], (a = null) && t(e.prototype, a), o && t(e, o), r
    }();
    jQuery(function() {
        a.init()
    })
}]);